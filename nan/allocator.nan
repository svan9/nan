////////////////////////////////////
//      file 'allocator.nan'      //
////////////////////////////////////

concept _c<T> = 

expand class std;
expand class Allocator<T>;

struct {
	mem_range m_range;
};

////////////////////////////////////////////////////////////
This& () @gen { }

////////////////////////////////////////////////////////////
This& (uint init_size) @gen {
	Allocate(init_size);
}

////////////////////////////////////////////////////////////
void Allocate(uint size) {
	m_range = mem_range(size*sizeof(T));	
}

////////////////////////////////////////////////////////////
void Realloc(uint newsize) {
	m_range = mem_range(m_range, newsize*sizeof(T));
}

////////////////////////////////////////////////////////////
void Free() @destructor {
	free(m_range);
	drop this;
}

////////////////////////////////////////////////////////////
uint Size() {
	return sizeof(T, m_range);
}

narrow Allocator<T>;

using default Allocator<byte>;